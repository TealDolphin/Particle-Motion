import numpy as np
from numpy.random import rand,randn
from math import exp,sqrt,log,cos,sin,tan
import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.axes3d as p3
import matplotlib.animation as anime

# Main is called from the 

def Main(E0,B0,pos,vel,q,m,TT,dt,a,b,c,d,,dim):
"""Inputs from the Gui: TotalTime,dt  Ex,Ey,Ez,Bx,By,Bz,q1,q2,q3,q4,m1,m2,m3,m4,a,b,c,d,x,v  Xmin,Xmax,Ymin,Ymax,Zmin,Zmax"""
    
    #Temporary declarations for testing purposes
    dt =  0.01
    pos = np.zeros((4,3))
    vel = np.zeros((4,3))
    TotalTime = 10
    a = 1
    b = 1
    c = 1
    d = "DebugMeQuickly"
    
    
    # Combining the E and B inital declarations into a single matrix and declaring the time variable t
    E0 = [Ex,Ey,Ez]
    B0 = [Bx,By,Bz]
    # Combining the q,m of each particle into a single matrix for q,m
    q = [q1,q2,q3,q4]
    m = [m1,m2,m3,m4]
    t = 0
    R = np.zeros((4,3))
    
    # Graphing initalizations for the 3-d graphs
    fig = plt.figure()
    ax = p3.Axes3D(fig)
    
    # Setting the axes properties
    ax.set_xlim3d([dim[1,0],dim[0,0]])
    ax.set_xlabel('X')

    ax.set_ylim3d([dim[1,1],dim[0,1]])
    ax.set_ylabel('Y')

    ax.set_zlim3d([dim[1,2],dim[0,2])
    ax.set_zlabel('Z')

    ax.set_title('Particle Motion')
    
    
    # Looping through from t=0 to t=TotalTime to run the simulation.
    while t < TotalTime:
        # Half time step to help the simulation be more stable due to part of the simulation using the centerpoint rule.
        t += dt/2
        
        R = Dist(R,pos)
        
        # Calculating the Total E and B fields in x,y,z at each particle then passing the E,B fields back at each particle
        E,B = Fields(R,E0,B0,pos,vel,q,a,b,c,d,t)
        # Calculate the Force on each particle based on the E,B fields at those particles
        F = Forces(E,B,vel,q)
        # Stepping the position of each particle forward and changing the velocity based on the force
        pos,vel = Move(pos,vel,F,m,dt)
        
        t += dt/2
        # Prints the new particle positions to the screen
        Draw(pos)
        
        
        
        # anime.FuncAnimation(fig)
        # {ax.scatter3D(pos[])}
        
        # Semi-hidden debuging tools for ease of use.
        if d == "DebugMePlease":
            print(pos,vel)
            input("Continue?")
        if d == "DebugMeQuickly":
            print(pos,vel)
