# Main is called from the start of the program with the GUI
def Main(E0,B0,pos,vel,q,m,a,b,c,d,TotalTime,dt,dim,PP,Skip):
    t = 0
    R = np.zeros((4,3))
    # Graphing initalizations for the 3-d graphs
    fig = plt.figure()
    ax = p3.Axes3D(fig)
    # Setting the axes properties
    ax.set_xlim3d([dim[1,0],dim[0,0]])
    ax.set_xlabel('X')
    ax.set_ylim3d([dim[1,1],dim[0,1]])
    ax.set_ylabel('Y')
    ax.set_zlim3d([dim[1,2],dim[0,2]])
    ax.set_zlabel('Z')
    ax.set_title('Particle Motion')
    
    posInital = pos.copy() #The .copy() is required because otherwise python just copies the pointer and not the values so when it calls posInital after changing pos it would call the same
    Jump = 0

    # Looping through from t=0 to t=TotalTime to run the simulation.
    while t < TotalTime:
        # Half time step to help the eval part of the simulation be more stable due to part of the simulation using the centerpoint rule.
        t += dt/2
        R = Dist(R,pos)
        
        # Calculating the Total E and B fields in x,y,z at each particle then passing the E,B fields back at each particle
        E,B = Fields(R,E0,B0,pos,vel,q,a,b,c,d,t)
        
        # Calculate the Force on each particle based on the E,B fields at those particles
        F = Forces(E,B,vel,q)
        
        # Stepping the position of each particle forward and changing the velocity based on the force
        pos,vel = Move(pos,vel,F,m,dt)
        
        t += dt/2
        
        if Jump == Skip:
            # Prints the new particle positions to the screen
            Draw(pos,posInital,ax,PP)
            Jump = 0
            posInital = pos.copy()
        else:
            Jump += 1
